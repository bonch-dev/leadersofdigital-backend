image: alpine:latest

variables:
  ####################################
  ###       !!! Warning !!!        ###
  ####################################
  ### IF YOU NEED TO SAVE YOUR APPLICATION DATA'S (storage files) YOU MUST
  ### 1. CHANGE THIS TO "statefulset"
  ### 2. CHANGE "pvc.enabled" TO "true" IN /chart/values.yaml
  ### 3. DEFINE "pvc.size" HOW MUCH YOU NEED (pls, max 20Gi)
  ROLLOUT_RESOURCE_TYPE: deployment
  ####################################
  ### End of Stateful data message ###
  ####################################

  ### App block
  APP_SECURE: "true"
  LOG_CHANNEL: "stderr"

  ### Standard DB configs
  DB_CONNECTION: "pgsql"
  POSTGRES_DB: $CI_PROJECT_NAME
  POSTGRES_USER: $CI_PROJECT_NAME
  POSTGRES_PASSWORD: $CI_COMMIT_REF_SLUG
  DB_PORT: 5432

  ### DB init and migrate tools
  DB_INITIALIZE: "composer run initialize --working-dir=/app/"
  DB_MIGRATE: "composer run migrate --working-dir=/app/"

  ### Postgres block
  POSTGRES_ENABLED: "true"

  ### Redis block
  REDIS_ENABLED: "false"
  REDIS_PASSWORD: $CI_COMMIT_REF_SLUG
  REDIS_URL: $CI_ENVIRONMENT_SLUG"-redis-master:6379"

  ### Build args
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  KUBE_NAMESPACE: $CI_PROJECT_PATH_SLUG

  ### Extra magic variables to helm chart
  HELM_UPGRADE_EXTRA_ARGS: "
    --set global.storageClass=dnfs
    --set global.postgresql.postgresqlPostgresPassword=$CI_COMMIT_REF_SLUG
    --set global.postgresql.postgresqlPassword=$CI_COMMIT_REF_SLUG
    --set global.postgresql.postgresqlUsername=$CI_PROJECT_NAME
    --set global.postgresql.postgresqlDatabase=$CI_PROJECT_NAME
    --set redis.enabled=$REDIS_ENABLED
    --set global.redis.password=$CI_COMMIT_REF_SLUG
    --set application.redis_port=6379
    --set application.redis_host=$CI_ENVIRONMENT_SLUG-redis-master
    --set application.redis_password=$CI_COMMIT_REF_SLUG
  "

  TEST_DISABLED: "true"

stages:
  - build-test
  - review
  - staging
  - deploy
  - cleanup

build:
  stage: build-test
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image/master:stable"
  services:
    - docker:stable-dind
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" != "master" ]]; then
        export APP_ENV="local"
        export APP_DEBUG="true"
      else
        export APP_ENV="production"
        export APP_DEBUG="false"
      fi
    - |
      export AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS=" \
            --build-arg APP_SECURE=\"$APP_SECURE\" \
            --build-arg APP_ENV=\"$APP_ENV\" \
            --build-arg APP_DEBUG=\"$APP_DEBUG\" \
            --build-arg DB_DATABASE=\"$CI_PROJECT_NAME\" \
            --build-arg DB_CONNECTION=\"$DB_CONNECTION\" \
            --build-arg LOG_CHANNEL=\"$LOG_CHANNEL\" \
      "
    - /build/build.sh
  only:
    - branches
    - tags

.auto-deploy:
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:latest"
  before_script:
    - |
      if [[ "$CI_COMMIT_REF_NAME" != "master" ]]; then
        export HELM_UPGRADE_VALUES_FILE=".gitlab/auto-deploy-values-review.yaml"
      fi

review:
  extends: .auto-deploy
  stage: review
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy
    - auto-deploy persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_PROJECT_ID-$CI_ENVIRONMENT_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    on_stop: stop_review
  artifacts:
    paths: [environment_url.txt]
  only:
    refs:
      - branches
      - tags
    kubernetes: active
  except:
    refs:
      - master
      - staging
    variables:
      - $REVIEW_DISABLED

stop_review:
  extends: .auto-deploy
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - auto-deploy initialize_tiller
    - auto-deploy delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
      - tags
      - staging
      - master
    kubernetes: active
  except:
    variables:
      - $REVIEW_DISABLED

staging:
  extends: .auto-deploy
  stage: staging
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy
  environment:
    name: staging
    url: https://$CI_PROJECT_NAME-staging.$KUBE_INGRESS_BASE_DOMAIN
  only:
    refs:
      - staging
    kubernetes: active
  except:
    variables:
      - $STAGING_DISABLED

production:
  extends: .auto-deploy
  stage: deploy
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy
    - auto-deploy persist_environment_url
  environment:
    name: production
    url: https://$CI_PROJECT_NAME.$KUBE_INGRESS_BASE_DOMAIN
  artifacts:
    paths: [environment_url.txt]
  only:
    refs:
      - master
    kubernetes: active
